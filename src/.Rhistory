4
4
5
4
4
4
4
5
3
4
6
3
3
3
3
4
3
4
ni
length(ni)
aov.tab[1,1:4]
aov.tab[1,1:4]=c(19,2.903303,0.152805421,7.724208984)
aov.tab[2,1:3]
aov.tab[2,1:3]=c(59,1.1671771,0.019782663)
S
ni
n.
k
s2s
s2w
k
s2total
H2C
SE
CI
c(se=1.11,ci=1.23)
getH2C(x,g)
hist(x)
tree.pheno
hist(tree.pheno$genotype)
geno=c(11,15,21)
geno
rep(geno,5)
unique(tree.pheno$genotype)
pheno
table(tree.pheno[,1])
reps=5
reps
pheno
geno
geno
trees
trees
trees
trees
trees
unlist(trees)
makeTrees
makeTrees()
tree.pheno
insects
insect
het.values=c(5,21)
allelic.range=c(0,3)
n=256
n=25
n
com.
n=100
com.
cgSim <- function(tree.pheno='tree phenotype matrix',insect='community phenotype matrix',reps=10,GG=8,YY=5,VeT=8,Ve=0.1,VeN=15,K=100){

if (any(tree.pheno=='tree phenotype matrix')){tree.pheno <- gpmTrees()}
if (any(insect=='community phenotype')){insect <- gpmCom()}

###Experimental design
# reps <- 10 #number of times to run simulation
# GG <- 8 #number of selection scenarios
# YY <- 5 #number of environmental scenarios
###Parameter values
# VeT <- 8 #environmental variance in tree trait influences tree heritability (2 for high H2 and 8 for low H2)
# Ve <- 0.1 #environmental variance for insect trait
# VeN <- 15 #step size for environmental variance in interactions (0 15 30 45 60)
# K <- 100 #insect pop carrying capacity

###Initiate output objects
T <- nrow(tree.pheno) #number of trees
I <- nrow(insect) #number of insects
art_g <- matrix(NA,nrow=T,ncol=I) #insect gene frequency
art_z <- matrix(NA,nrow=T,ncol=I) #insect trait mean
art_Vg <- matrix(NA,nrow=T,ncol=I) #insect gene variability
art_Vz <- matrix(NA,nrow=T,ncol=I) #insect trait variability
gen_load <- matrix(NA,nrow=T,ncol=I) #insect genetic load
dem_load <- matrix(NA,nrow=T,ncol=I) #insect demographic load
art_pop <- matrix(NA,nrow=T,ncol=I) #insect population community matrix
                                        #STORAGE LIST
out <- gg.list <- yy.list <- list()
###Simulation
tic <- Sys.time() #start stopwatch
for (RR in 1:reps){
###generating trees to use
  scores_XX <- matrix(NA,nrow=nrow(tree.pheno),ncol=GG)
  scores_XX[,1] <- tree.pheno[,2] + runif(T,0,1) * VeT - VeT/2 #scores are in second column of trees
###filling phenotypic values for trees (same set of trees for all scenarios
  for (z in 2:GG){
    scores_XX[1:T,z] <- scores_XX[1:T,1]
  }
  trees <- scores_XX #just renaming phenotypes to be trees
  for (y in 1:YY){
                                        #YY variation scenarios of other ecological interactions
    for (z in 1:GG){
                                        #GG selection intensity scenarios
      for (i in 1:T){
                                        #insects on trees
                                        #for each tree i
        for (j in 1:I){
                                        #for each insect j
###Equation 6 from MS - Arthropod (art) Gene frequency
          if (trees[i,z] < 2*insect[j,1]){
            art_g[i,j] <- 0
          }else if (trees[i,z] > 2*insect[j,2]){
            art_g[i,j] <- 1
          }else{
            art_g[i,j] <- (trees[i,z] - 2*insect[j,1]) / (2*insect[j,2] - 2*insect[j,1])
          }
###Equation 6 from MS - calculating mean trait Z from art gene frequency
          art_z[i,j] <- 2*insect[j,2]*art_g[i,j]^2 + 2*art_g[i,j]*(1-art_g[i,j])*(insect[j,1]+insect[j,2])+2*insect[j,1]*(1-art_g[i,j])^2 + runif(1)*Ve - Ve/2
###Art genetic (Vg) and trait variance (Vz)
          art_Vg[i,j] <- 2*art_g[i,j]*(1-art_g[i,j])
          art_Vz[i,j] <- art_Vg[i,j]*(insect[j,2] - insect[j,1])^2+Ve
###Evolutionary (gen) and demographic (dem) loads from selection
          gen_load[i,j] <- 0.5*(0.00007924*2.511886^(z-1))*(art_z[i,j]- trees[i,z])^2
          dem_load[i,j] <- 0.5*(0.00007924*2.511886^(z-1))*(art_Vz[i,j])
###Equation 7 from MS - art predicted population size as a function of loads and ecological variance
          art_pop[i,j] <- K * (1 - gen_load[i,j] - dem_load[i,j])+runif(1)*VeN*(y-1)-VeN*(y-1)/2
###preventing art pops from going negative or zero slightly above zero
          if (art_pop[i,j] < 0){
            art_pop[i,j] <- runif(1)*3;
          }else{
            art_pop[i,j] #not sure if this is correct
          }
        } #end insect loop
      } #end tree loop
###keeping track of which iteration the simulation is on reps*GG*(y-1)+reps*(z-1)+RR
###dlmwrite(int2str(reps*GG*(y-1)+reps*(z-1)+RR),art_pop,'\t');  %%% write arthropod sampling to file %%%
                                        #print(paste(reps*GG*(y-1),reps*(z-1),RR,sep='_'))
      print(paste(RR,y,z,sep=' '))
      gg.list[[z]] <- art_pop
                                        # names(gg.list)[z] <- paste(reps*GG*(y-1),reps*(z-1),RR,sep='')
      names(gg.list)[z] <- paste(RR,y,z,sep='_')
    } #end selection loop
    yy.list[[y]] <- gg.list
  } #end environment loop
  toc <- Sys.time() #stop stopwatch
  out[[RR]] <- yy.list
} #end REP loop and END simulation

return(out)
}
test <- cgSim(reps=1,GG=1,YY=1)
gpmTrees()
tree.pheno
test <- cgSim(reps=1,GG=1,YY=1)
test <- cgSim(reps=1,GG=2,YY=2)
test
test <- cgSim(reps=1,GG=2,YY=1)
test <- cgSim(reps=1,GG=1,YY=2)
test <- cgSim(reps=1,GG=3,YY=2)
test <- cgSim(reps=1,GG=3,YY=1)
test
dir()
source('./ComGenR_development/src/ComGenR.R')
rm(list=ls())
cgSim
source('./ComGenR_development/src/ComGenR.R')
cgSim
test <- cgSim()
gpmTrees()
rm(list=ls())
q()
n
list()
ls()
source('./ComGenR.R')
?package.skeleton
package.skeleton(name='ComGenR',path='~/projects/ComGenR')
f.list
called.by
lsf.str()
?lsf.str
rm(f.list)
library(ComGenR)
rm(f.list)
cgSim(reps=1,GG=2,YY=1)
test <- cgSim(reps=1,GG=2,YY=1)
com <- test[[1]][[1]]
com
com <- test[[1]][[1]][[1]]
com
dim(com)
gpTrees()
gpmTrees()
geno <- gpmTrees()[,1]
geno
geno <- factor(geno)
geno
adonis(com~geno)
nms <- nmds.min(nmds(vegdist(com),maxdim=1))
nms
nms
ls()
getH2C(x=nms,g=geno,sibs=1)
getH2C
getH2C(x=as.numeric(nms),g=geno,sibs=1)
as.numeric(nms)
nms
getH2C(x=nms[,1],g=geno,sibs=1)
nms <- nmds(vegdist(com),maxdim=1)
nms <- nmds(vegdist(com),maxdim=1)
nms
nmds.min(nms)
nms <- nmds(vegdist(com),maxdim=1)
nms
nms$stress
min(nms$stress)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c
myh2c[1] - myh2c[2]
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
nms <- nmds(vegdist(com),maxdim=1)
getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
myh2c <- getH2C(x=nmds.min(nms)[,1],g=geno,sibs=1)
c(myh2c[1] - myh2c[2],myh2c[1],myh2c[1] + myh2c[2])
